# Copyright (C) 2022-2024 Daniel Mueller <deso@posteo.net>
# SPDX-License-Identifier: GPL-3.0-or-later

name: Test

on:
  pull_request:
  push:
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Build without debug information enabled to decrease compilation time
  # and binary sizes in CI. This option is assumed to only have marginal
  # effects on the generated code, likely only in terms of section
  # arrangement. See
  # https://doc.rust-lang.org/cargo/reference/environment-variables.html
  # https://doc.rust-lang.org/rustc/codegen-options/index.html#debuginfo
  RUSTFLAGS: '-C debuginfo=0'

jobs:
  build:
    name: Build [${{ matrix.rust }}]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [1.52.0, stable]
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    - name: Build
      run: |
        cargo build --lib --tests --examples
        cargo build --lib --tests --examples --release
  build-static:
    name: Build static
    runs-on: ubuntu-latest
    env:
      READLINE_LIB_DIR: /usr/lib/x86_64-linux-gnu/
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Build
      run: |
        sudo apt-get install libreadline-dev
        cargo build --lib --tests --examples --features=static
        cargo build --lib --tests --examples --features=static --release
  test:
    name: Test and coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    - name: Test and gather coverage
      run: cargo llvm-cov --all-targets --lcov --output-path lcov.info --ignore-filename-regex=/dev/null
    - name: Upload code coverage results
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: lcov.info
  test-sanitizers:
    name: Test with ${{ matrix.sanitizer }} sanitizer
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, leak]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - name: Enable debug symbols
      run: |
          # to get the symbolizer for debug symbol resolution
          sudo apt-get install -y llvm-14
          # to fix buggy leak analyzer:
          # https://github.com/japaric/rust-san#unrealiable-leaksanitizer
          sed -i '/\[features\]/i [profile.dev]' Cargo.toml
          sed -i '/profile.dev/a opt-level = 1' Cargo.toml
          cat Cargo.toml
    - name: cargo test -Zsanitizer=${{ matrix.sanitizer }}
      env:
        CFLAGS: "-fsanitize=${{ matrix.sanitizer }}"
        CXXFLAGS: "-fsanitize=${{ matrix.sanitizer }}"
        RUSTFLAGS: "-Zsanitizer=${{ matrix.sanitizer }}"
        ASAN_OPTIONS: "detect_odr_violation=0:detect_leaks=0"
        LSAN_OPTIONS: ""
      run: cargo test --workspace --lib --tests --target x86_64-unknown-linux-gnu
  clippy:
    name: Lint with clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo clippy --no-deps --all-targets --all-features -- -A unknown_lints -A deprecated -D warnings
  cargo-doc:
    name: Generate documentation
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: '-D warnings'
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo doc --no-deps
